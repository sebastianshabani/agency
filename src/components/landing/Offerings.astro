---
import offeringsData from '../../data/offeringsData.json';
---

<section class="border-b border-white/20 bg-accent-500">
  <div class="mx-auto max-w-7xl border-white/20 border-x overflow-hidden p-8">
    <div class="offerings-marquee-container relative w-full overflow-x-hidden">
      <div class="offerings-image-marquee flex gap-5" id="offerings-loop">
        {offeringsData.map((offering, index) => (
          <div
            key={index}
            class="offering-item relative w-[267px] h-[392px] lg:w-[400px] lg:h-[588px] rounded-lg overflow-hidden shadow-md group"
          >
            {/* Image Section */}
            <img
              src={offering.image}
              alt={offering.title}
              class="w-full h-full object-cover transition-transform duration-500 ease-in-out group-hover:scale-105"
            />

            {/* Chips Section - Modified for better visibility */}
            <div
              class="absolute bottom-0 left-0 flex max-w-full flex-[0_0_auto] w-full flex-row flex-wrap gap-2 p-4 pr-10 opacity-0 transition-all duration-300 group-hover:opacity-100"
              style="background: linear-gradient(180deg, rgba(0, 0, 0, 0.00) 0%, rgba(0, 0, 0, 0.75) 100%)"
            >
              {offering.chips.map((chip, chipIndex) => (
                <div
                  key={chipIndex}
                  class="max-w-full flex-[0_0_auto] text-white flex w-fit items-center justify-center gap-2 rounded-full font-semibold px-3 py-1 border border-white/30 backdrop-blur-sm bg-black/20 flex-row"
                >
                  <span class="text-sm 1280:text-base">{chip}</span>
                </div>
              ))}
            </div>
          </div>
        ))}

        {/* Duplicate Items for Infinite Scroll */}
        {offeringsData.map((offering, index) => (
          <div
            key={`duplicate-${index}`}
            class="offering-item relative w-[267px] h-[392px] lg:w-[400px] lg:h-[588px] rounded-lg overflow-hidden shadow-md group"
          >
            <img
              src={offering.image}
              alt={offering.title}
              class="w-full h-full object-cover transition-transform duration-500 ease-in-out group-hover:scale-105"
            />

            <div
              class="absolute bottom-0 left-0 flex max-w-full flex-[0_0_auto] w-full flex-row flex-wrap gap-2 p-4 pr-10 opacity-0 transition-all duration-300 group-hover:opacity-100"
              style="background: linear-gradient(180deg, rgba(0, 0, 0, 0.00) 0%, rgba(0, 0, 0, 0.75) 100%)"
            >
              {offering.chips.map((chip, chipIndex) => (
                <div
                  key={chipIndex}
                  class="max-w-full flex-[0_0_auto] text-white flex w-fit items-center justify-center gap-2 rounded-full font-semibold px-3 py-1 border border-white/30 backdrop-blur-sm bg-black/20 flex-row"
                >
                  <span class="text-sm 1280:text-base">{chip}</span>
                </div>
              ))}
            </div>
          </div>
        ))}
      </div>
    </div>
  </div>
</section>
<script>
  document.addEventListener('DOMContentLoaded', () => {
  const offeringsContainer = document.querySelector('.offerings-marquee-container');
  const offeringsAnimation = document.querySelector('.offerings-image-marquee');

  if (!offeringsContainer || !offeringsAnimation) return;

  const scrollWidth = offeringsAnimation.scrollWidth / 2;
  let scrollTimeout;

  const handleScroll = () => {
    // Clear any existing timeouts to prevent multiple resets
    clearTimeout(scrollTimeout);
    
    if (offeringsContainer.scrollLeft >= scrollWidth) {
      // Add a small delay before resetting to prevent visible jumps
      scrollTimeout = setTimeout(() => {
        offeringsContainer.scrollLeft = 0;
      }, 50);
    } else if (offeringsContainer.scrollLeft <= 0) {
      scrollTimeout = setTimeout(() => {
        offeringsContainer.scrollLeft = scrollWidth;
      }, 50);
    }
  };

  offeringsContainer.addEventListener('scroll', handleScroll);

  let isScrolling = true;
  let autoScrollRAF;

  const autoScroll = () => {
    if (isScrolling) {
      offeringsContainer.scrollLeft += 0.5; // Reduced speed for smoother scrolling
    }
    autoScrollRAF = requestAnimationFrame(autoScroll);
  };

  autoScroll();

  const stopAutoScroll = () => {
    isScrolling = false;
    cancelAnimationFrame(autoScrollRAF);
  };

  const startAutoScroll = () => {
    isScrolling = true;
    autoScroll();
  };

  let isDragging = false;
  let startX;
  let scrollLeft;

  const startDrag = (e) => {
    isDragging = true;
    offeringsContainer.style.cursor = 'grabbing';
    startX = e.type.includes('mouse') ? e.pageX : e.touches[0].pageX;
    scrollLeft = offeringsContainer.scrollLeft;
    stopAutoScroll();
    
    // Prevent image dragging
    e.preventDefault();
  };

  const onDrag = (e) => {
    if (!isDragging) return;
    e.preventDefault();
    
    const x = e.type.includes('mouse') ? e.pageX : e.touches[0].pageX;
    const distance = x - startX;
    offeringsContainer.scrollLeft = scrollLeft - distance;
  };

  const stopDrag = () => {
    isDragging = false;
    offeringsContainer.style.cursor = '';
    
    // Add a small delay before restarting auto-scroll
    setTimeout(startAutoScroll, 100);
  };

  // Prevent default drag behavior on images
  offeringsContainer.querySelectorAll('img').forEach(img => {
    img.addEventListener('dragstart', (e) => e.preventDefault());
  });

  // Mouse events
  offeringsContainer.addEventListener('mousedown', startDrag);
  document.addEventListener('mousemove', onDrag);
  document.addEventListener('mouseup', stopDrag);

  // Touch events
  offeringsContainer.addEventListener('touchstart', startDrag, { passive: false });
  document.addEventListener('touchmove', onDrag, { passive: false });
  document.addEventListener('touchend', stopDrag);

  // Stop auto-scroll on hover
  offeringsContainer.addEventListener('mouseenter', stopAutoScroll);
  offeringsContainer.addEventListener('mouseleave', startAutoScroll);

  // Clean up event listeners on page unload
  window.addEventListener('unload', () => {
    cancelAnimationFrame(autoScrollRAF);
    clearTimeout(scrollTimeout);
  });
});
</script>