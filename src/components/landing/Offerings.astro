---
// Import the JSON file for Offerings
import offeringsData from '../../data/offeringsData.json';
---

<section class="border-b border-white/20 bg-accent-500">
  <div class="mx-auto max-w-7xl border-white/20 border-x overflow-hidden p-8">
    <div class="offerings-marquee-container relative w-full overflow-x-hidden">
      <div class="offerings-image-marquee flex gap-5" id="offerings-loop">
        {offeringsData.map((offering, index) => (
          <div
            key={index}
            class="offering-item relative w-[267px] h-[392px] lg:w-[400px] lg:h-[588px] rounded-lg overflow-hidden shadow-md group"
          >
            {/* Image Section */}
            <img
              src={offering.image}
              alt={offering.title}
              class="w-full h-full object-cover transition-transform duration-500 ease-in-out group-hover:scale-105"
            />

            {/* Chips Section */}
            <div
              class="flex max-w-full flex-[0_0_auto] mt-auto w-full flex-row flex-wrap gap-2 p-4 pr-10 opacity-0 transition-opacity duration-700 group-hover:opacity-100"
              style="background: linear-gradient(180deg, rgba(0, 0, 0, 0.00) 0%, rgba(0, 0, 0, 0.25) 100%)"
            >
              {offering.chips.map((chip, chipIndex) => (
                <div
                  key={chipIndex}
                  class="max-w-full flex-[0_0_auto] text-bor-foreground flex w-fit items-center justify-center gap-2 rounded-full font-semibold px-2 py-0.5 border border-surface flex-row"
                >
                  <span class="text-sm 1280:text-base">{chip}</span>
                </div>
              ))}
            </div>
          </div>
        ))}

        {/* Duplicate Items for Infinite Scroll */}
        {offeringsData.map((offering, index) => (
          <div
            key={`duplicate-${index}`}
            class="offering-item relative w-[267px] h-[392px] lg:w-[400px] lg:h-[588px] rounded-lg overflow-hidden shadow-md group"
          >
            <img
              src={offering.image}
              alt={offering.title}
              class="w-full h-full object-cover transition-transform duration-500 ease-in-out group-hover:scale-105"
            />

            <div
              class="flex max-w-full flex-[0_0_auto] mt-auto w-full flex-row flex-wrap gap-2 p-4 pr-10 opacity-0 transition-opacity duration-700 group-hover:opacity-100"
              style="background: linear-gradient(180deg, rgba(0, 0, 0, 0.00) 0%, rgba(0, 0, 0, 0.25) 100%)"
            >
              {offering.chips.map((chip, chipIndex) => (
                <div
                  key={chipIndex}
                  class="max-w-full flex-[0_0_auto] text-bor-foreground flex w-fit items-center justify-center gap-2 rounded-full font-semibold px-2 py-0.5 border border-surface flex-row"
                >
                  <span class="text-sm 1280:text-base">{chip}</span>
                </div>
              ))}
            </div>
          </div>
        ))}
      </div>
    </div>
  </div>
</section>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const offeringsContainer = document.querySelector('.offerings-marquee-container');
    const offeringsAnimation = document.querySelector('.offerings-image-marquee');

    if (!offeringsContainer || !offeringsAnimation) return;

    const scrollWidth = offeringsAnimation.scrollWidth / 2;

    const handleScroll = () => {
      if (offeringsContainer.scrollLeft >= scrollWidth) {
        offeringsContainer.scrollLeft = 0;
      } else if (offeringsContainer.scrollLeft === 0) {
        offeringsContainer.scrollLeft = scrollWidth;
      }
    };
    offeringsContainer.addEventListener('scroll', handleScroll);

    let isScrolling = true;

    const autoScroll = () => {
      if (isScrolling) {
        offeringsContainer.scrollBy({ left: 1, behavior: 'smooth' });
      }
      requestAnimationFrame(autoScroll);
    };

    autoScroll();

    const stopAutoScroll = () => (isScrolling = false);
    const startAutoScroll = () => (isScrolling = true);

    offeringsContainer.addEventListener('mouseenter', stopAutoScroll);
    offeringsContainer.addEventListener('mouseleave', startAutoScroll);

    let isDragging = false;
    let startX = 0;
    let scrollLeft = 0;

    const startDrag = (e) => {
      isDragging = true;
      startX = e.pageX || (e.touches?.[0]?.pageX ?? 0);
      scrollLeft = offeringsContainer.scrollLeft;
      stopAutoScroll();
    };

    const onDrag = (e) => {
      if (!isDragging) return;
      const currentX = e.pageX || (e.touches?.[0]?.pageX ?? 0);
      const x = currentX - startX;
      offeringsContainer.scrollLeft = scrollLeft - x;
    };

    const stopDrag = () => {
      if (isDragging) {
        isDragging = false;
        startAutoScroll();
      }
    };

    offeringsContainer.addEventListener('mousedown', startDrag);
    document.addEventListener('mousemove', onDrag);
    document.addEventListener('mouseup', stopDrag);

    offeringsContainer.addEventListener('touchstart', startDrag);
    document.addEventListener('touchmove', onDrag);
    document.addEventListener('touchend', stopDrag);
  });
</script>
