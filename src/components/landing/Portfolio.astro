---
// Import the JSON file for Portfolio
import portfolioData from '../../data/portfolioData.json';
---

<section class="portfolio-section border-b border-white/20 bg-accent-500 overflow-hidden relative">
  <div class="mx-auto max-w-7xl border-white/20 border-x px-8 py-8 gradient-grid overflow-hidden"> <!-- Added overflow-hidden here -->
    <div class="mx-auto text-center">
      <h3 class="text-3xl font-display text-white uppercase">
        {portfolioData.heading.title}
      </h3>
      <h3 class="text-xl font-display text-white uppercase mt-1">
        {portfolioData.heading.subtitle}
      </h3>
    </div>

    <!-- Portfolio Marquee -->
    <div class="portfolio-marquee-container mx-auto max-w-7xl scrollbar-hide overflow-hidden"> <!-- Scoped to max-w-7xl -->
      <div class="portfolio-image-marquee gap-5"> <!-- Adjusted gap to 20px (1.25rem) -->
        {portfolioData.images.map((image, index) => (
          <img
            key={index}
            src={image}
            alt={`Portfolio Image ${index + 1}`}
            class="portfolio-image"
          />
        ))}

        {portfolioData.images.map((image, index) => (
          <img
            key={`duplicate-${index}`}
            src={image}
            alt={`Portfolio Image Duplicate ${index + 1}`}
            class="portfolio-image"
          />
        ))}
      </div>
    </div>
  </div>
</section>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const marqueeContainer = document.querySelector('.portfolio-marquee-container');
    const marqueeAnimation = document.querySelector('.portfolio-image-marquee');
    if (!marqueeContainer || !marqueeAnimation) return;

    const scrollWidth = marqueeAnimation.scrollWidth / 2;

    // Infinite scrolling logic
    const handleScroll = () => {
      if (marqueeContainer.scrollLeft >= scrollWidth) {
        marqueeContainer.scrollLeft = 0;
      } else if (marqueeContainer.scrollLeft === 0) {
        marqueeContainer.scrollLeft = scrollWidth;
      }
    };
    marqueeContainer.addEventListener('scroll', handleScroll);

    // Smooth auto-scroll using requestAnimationFrame
    let isScrolling = true;

    const autoScroll = () => {
      if (isScrolling) {
        marqueeContainer.scrollBy({ left: 1, behavior: 'smooth' });
      }
      requestAnimationFrame(autoScroll);
    };

    autoScroll(); // Start auto-scroll

    // Pause auto-scroll on hover or drag
    const stopAutoScroll = () => (isScrolling = false);
    const startAutoScroll = () => (isScrolling = true);

    marqueeContainer.addEventListener('mouseenter', stopAutoScroll);
    marqueeContainer.addEventListener('mouseleave', startAutoScroll);

    // Drag-to-scroll functionality
    let isDragging = false;
    let startX = 0;
    let scrollLeft = 0;

    const startDrag = (e) => {
      isDragging = true;
      startX = e.pageX || (e.touches?.[0]?.pageX ?? 0);
      scrollLeft = marqueeContainer.scrollLeft;
      stopAutoScroll(); // Pause auto-scroll while dragging
    };

    const onDrag = (e) => {
      if (!isDragging) return;
      const currentX = e.pageX || (e.touches?.[0]?.pageX ?? 0);
      const x = currentX - startX;
      marqueeContainer.scrollLeft = scrollLeft - x;
    };

    const stopDrag = () => {
      if (isDragging) {
        isDragging = false;
        startAutoScroll(); // Restart auto-scroll after dragging
      }
    };

    marqueeContainer.addEventListener('mousedown', startDrag);
    document.addEventListener('mousemove', onDrag);
    document.addEventListener('mouseup', stopDrag);

    marqueeContainer.addEventListener('touchstart', startDrag);
    document.addEventListener('touchmove', onDrag);
    document.addEventListener('touchend', stopDrag);
  });
</script>
